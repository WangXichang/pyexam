# coding: utf8


# stm--ppt algorithm
    procedure:
   (1) set std: (end+start)/2/std_num
   (2) set points: start - end + 1
   (3) set  out score point-ratio(cdf) table, using strategy, for all subjects
   (4) calc raw score point-percent(cdf) table, for each subject, seg-kmx_percent
   (5) calc map_table: map raw point to out point, using strategies
                       search seg-point(py) in out-point-ratio-table for each raw-point(px)-percent
                       px(seg) --> py(kmx_ts)
   (6) calc raw score to out score for each record(person)

   strategy:
   (1) ratio-table strategy:
        1. add trunc error at min point: yes, no
        2. add trunc error at max point: yes, no
        3. define section  at end point: left, right, middle
   (2) map_rawscore_to_outscore strategies:
        1. sort_order
        2. ratio-proximate
        3. ratio-cumulative
        4. score_max_to_max
        5. score_min_to_min



# models parameters: grade score ratios, segments
CONST_ZHEJIANG_RATIO = (1, 2, 3, 4, 5, 6, 7, 8, 7, 7, 7, 7, 7, 7, 6, 5, 4, 3, 2, 1, 1)
CONST_ZHEJIANG_SECTION = ((100-i*3, 100-i*3) for i in range(21))
CONST_SHANGHAI_RATIO = (5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5)
CONST_SHANGHAI_SECTION = ((70-i*3, 70-i*3) for i in range(11))
CONST_BEIJING_RATIO = (1, 2, 3, 4, 5, 7, 8, 9, 8, 8, 7, 6, 6, 6, 5, 4, 4, 3, 2, 1, 1)
CONST_BEIJING_SECTION = ((100-i*3, 100-i*3) for i in range(21))
CONST_TIANJIN_RATIO = (2, 3, 4, 5, 6, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 5, 4, 3, 1, 1, 1)
CONST_TIANJIN_SECTION = ((100-i*3, 100-i*3) for i in range(21))

# ShanDong
# 8 levels, (3%, 7%, 16%, 24%, 24%, 16%, 7%, 3%)
# 8 segments: (100, 91), ..., (30, 21)
CONST_SHANDONG_RATIO = (3, 7, 16, 24, 24, 16, 7, 3)
CONST_SHANDONG_SECTION = ((100-i*10, 100-i*10-9) for i in range(8))


# GuangDong
#   predict: mean = 70.21, std = 20.95
CONST_GUANGDONG_RATIO = (17, 33, 33, 15, 2)
CONST_GUANGDONG_SECTION = ((100, 83), (82, 71), (70, 59), (58, 41), (40, 30))


# 7-ShengShi: JIANGSU, FUJIAN, HUNAN, HUBEI, CHONGQING, HEBEI, LIAONING
#   5 levels
#   ration=(15%、35%、35%、13%, 2%),
#   segment=(86～100、71～85、56～70、41～55、30～40)
#   predict: mean = 70.24, std = 21.76
#            mean = sum((x/100*sum(y)/2 for x,y in zip(SS7ratio,SS7segment)))
#            std = math.sqrt(sum(((sum(y)/2-mean)**2 for x,y in zip(SS7ratio,SS7segment)))/5)
CONST_SS7_RATIO = (15, 35, 35, 13, 2)
CONST_SS7_SECTION = ((100, 86), (85, 71), (70, 56), (55, 41), (40, 30))

# get ratio from norm distribution table, scipy.stats.norm.cdf
# for standard score start-end range(100-900, 60-300,...)
def get_ratio_from_norm_cdf(start, end, std_num=4, step=1):
    """
    set endpoint ratio from morm.cdf:
        start_point: seg[0] = (1 - cdf(-4))*100
         next_point: seg_ratio = cdf[i+1] - cdf[i],
          end_point: seg[-1] = 100 - sum(seg[:-1])      # ensure to sum==100
    """
    start_point, end_point, _mean = start, end, (start+end)/2
    _std = (_mean - start_point) / std_num
    norm_cdf = [sts.norm.cdf((v-_mean)/_std) for v in range(start_point, end_point + 1, step)]
    norm_table = [(norm_cdf[i] - norm_cdf[i-1])*100 if i > 0
                  else norm_cdf[i]*100
                  for i in range(len(norm_cdf))]
    norm_table[-1] = 100 - sum(norm_table[:-1])
    return tuple(norm_table)


# Hainan standard score(old national) parameters(range:100-900, ratio: norm:(std=100, mean=500))
CONST_HAINAN_RATIO = get_ratio_from_norm_cdf(100, 900)
CONST_HAINAN_SECTION = ((s, s) for s in range(900, 100-1, -1))

# Hainan2 out_scope: 60-300 (mean=180, std=30)
#         ordinary method: transform each score individually
#         use norm cdf for each point, first set in 60-300, then pick ratio-score in raw segtable
CONST_HAINAN300_RATIO = get_ratio_from_norm_cdf(60, 300)
CONST_HAINAN300_SECTION = ((s, s) for s in range(300, 60 - 1, -1))

# Hainan3 out_scope 60-300,
#         use plt method to transform
#         set top fine proximate ratio to norm distribution
CONST_HAINAN3_RATIO = (0.14, 2.14, 13.59, 34.13, 34.13, 13.59, 2.14, 0.14)
CONST_HAINAN3_SECTION = ((x, x - 30 + 1 if x > 90 else x - 30) for x in range(300, 90 - 1, -30))

# Hainan4 using plt for 60-300, use plt method to transform
#         set secondary proximate ratio
CONST_HAINAN4_RATIO = (0.2, 2.1, 13.6, 34.1, 34.1, 13.6, 2.1, 0.2)
CONST_HAINAN4_SECTION = ((x, x - 30 + 1 if x > 90 else x - 30) for x in range(300, 90 - 1, -30))

# Hainan5 using plt for 60-300, use plt method to transform
#         set suitable ratio
CONST_HAINAN5_RATIO = (1, 2, 14, 33, 33, 14, 2, 1)
CONST_HAINAN5_SECTION = ((x, x - 30 + 1 if x > 90 else x - 30) for x in range(300, 90 - 1, -30))
